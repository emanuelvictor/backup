package br.mil.mar.autenticador.test.domain.service;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import javax.jcr.RepositoryException;

import org.directwebremoting.io.FileTransfer;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.security.authentication.dao.SaltSource;
import org.springframework.security.authentication.encoding.ShaPasswordEncoder;

import br.mil.mar.commons.dabm.test.domain.AbstractIntegrationTests;
import br.mil.mar.dabm.autenticador.domain.entity.usuario.PerfilUsuarioAplicativo;
import br.mil.mar.dabm.autenticador.domain.entity.usuario.Usuario;
import br.mil.mar.dabm.autenticador.domain.repository.usuario.IUsuarioRepository;
import br.mil.mar.dabm.autenticador.domain.service.UsuarioService;

import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;

/**
 * 
 * @author rodrigo@eits.com.br
 */
public class UsuarioServiceTests extends AbstractIntegrationTests
{
	/*-------------------------------------------------------------------
	 *				 		     ATTRIBUTES
	 *-------------------------------------------------------------------*/
	/**
	 * 
	 */
	@Autowired
	private UsuarioService usuarioService;
	/**
	 * 
	 */
	@Autowired
	private IUsuarioRepository usuarioRepository;
	/**
	 * Password encoder
	 */
	@Autowired
	private ShaPasswordEncoder passwordEncoder;

	/**
	 * Hash generator for encryption
	 */
	@Autowired
	private SaltSource saltSource;

	/*-------------------------------------------------------------------
	 *				 		      TESTS
	 *-------------------------------------------------------------------*/
	/**
	 * 
	 */
	@Test
	public void insertUsuarioMustPass()
	{

		Usuario usuario = new Usuario( null, null, "Nome do Usuário", "login.usuario (NIP)",  "email.email@email", null, null, null, null, null, null, null );

		usuario = this.usuarioService.insertUsuario( usuario );

		Assert.assertNotNull( usuario );
		Assert.assertNotNull( usuario.getId() );
		Assert.assertNotNull( usuario.getCreated() );
		Assert.assertTrue( usuario.isEnabled() );
		Assert.assertFalse( usuario.getPassword().equals( "usuario" ) );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void findUsuarioByIdMustPass()
	{
		final Usuario usuario = this.usuarioService.findUsuarioById( 1L );

		Assert.assertNotNull( usuario );
		Assert.assertNotNull( usuario.getId() );
		Assert.assertNotNull( usuario.getCreated() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void listUsuariosByFiltersMustReturn0()
	{
		final Page<Usuario> usuarios = this.usuarioService.listUsuariosByFilters( "000001", null );

		Assert.assertNotNull( usuarios );
		Assert.assertEquals( 0, usuarios.getSize() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void listUsuariosByFiltersMustReturn1()
	{
		final Page<Usuario> usuarios = this.usuarioService.listUsuariosByFilters( "01", null );

		Assert.assertNotNull( usuarios );
		Assert.assertEquals( 1, usuarios.getSize() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void listUsuariosByFiltersAndDataBloqueioMustReturn3()
	{

		Page<Usuario> usuarios = this.usuarioService.listUsuariosByFiltersAndBloqueados( null, null );

		Assert.assertNotNull( usuarios );
		Assert.assertEquals( 3, usuarios.getSize() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void listUsuariosByFiltersAndBloqueadosMustReturn3()
	{
		final Page<Usuario> usuarios = this.usuarioService.listUsuariosByFiltersAndBloqueados( "01,00", null );

		Assert.assertNotNull( usuarios );
		Assert.assertEquals( 3, usuarios.getSize() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void listUsuariosByFiltersMustAllDesbloqueados()
	{
		final Page<Usuario> usuarios = this.usuarioService.listUsuariosByFilters( null, null );

		Assert.assertNotNull( usuarios );
		Assert.assertEquals( 1, usuarios.getSize() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void changePasswordAndSendEmailMustPass() throws Exception
	{
		this.usuarioService.changeSenhaUsuario( 1L, "senha" );
		Usuario usuario = this.usuarioService.findUsuarioById( 1L );
		Assert.assertEquals( this.passwordEncoder.encodePassword( "senha", saltSource.getSalt( usuario ) ), usuario.getSenha() );

		this.usuarioService.changeSenhaUsuario( 1L, "senha" /* senha atual */, "novaSenha" );
		usuario = this.usuarioService.findUsuarioById( 1L );
		Assert.assertEquals( this.passwordEncoder.encodePassword( "novaSenha", saltSource.getSalt( usuario ) ), usuario.getSenha() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", "/dataset/aplicativo/AplicativoDataSet.xml", "/dataset/aplicativo/PerfilAcessoDataSet.xml" })
	public void insertPerfilUsuarioAplicativoMustPass()
	{
		final PerfilUsuarioAplicativo perfilUsuarioAplicativo = this.usuarioService.insertPerfilUsuarioAplicativo( 1L, 1L );

		Assert.assertNotNull( perfilUsuarioAplicativo );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", "/dataset/aplicativo/AplicativoDataSet.xml", "/dataset/aplicativo/PerfilAcessoDataSet.xml", "/dataset/usuario/PerfilUsuarioAplicativoDataSet.xml", })
	public void removePerfilUsuarioAplicativoMustPass()
	{
		final PerfilUsuarioAplicativo perfilUsuarioAplicativo = this.usuarioService.insertPerfilUsuarioAplicativo( 2L, 2L );

		this.usuarioService.removePerfilUsuarioAplicativo( perfilUsuarioAplicativo.getId() );

		Assert.assertNotNull( perfilUsuarioAplicativo );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", "/dataset/aplicativo/AplicativoDataSet.xml", "/dataset/aplicativo/PerfilAcessoDataSet.xml", "/dataset/usuario/PerfilUsuarioAplicativoDataSet.xml", })
	public void listPerfilUsuarioAplicativosByUsuarioAplicativoIdMustPass()
	{
		Page<PerfilUsuarioAplicativo> perfisUsuarioAplicativo = this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 1L, null );
		Assert.assertNotNull( perfisUsuarioAplicativo );
		Assert.assertEquals( perfisUsuarioAplicativo.getTotalElements(), 2 );

		perfisUsuarioAplicativo = this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 2L, null );
		Assert.assertNotNull( perfisUsuarioAplicativo );
		Assert.assertEquals( perfisUsuarioAplicativo.getTotalElements(), 1 );

		perfisUsuarioAplicativo = this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 3L, null );
		Assert.assertNotNull( perfisUsuarioAplicativo );
		Assert.assertEquals( perfisUsuarioAplicativo.getTotalElements(), 2L );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void checkEmailMustPass()
	{
		Assert.assertTrue( this.usuarioService.checkEmail( "emanuel.fonseca@eits.com.br" ) );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", })
	public void checkLoginMustPass()
	{
		Assert.assertTrue( this.usuarioService.checkLogin( "user01" ) );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml" })
	public void bloquearAndDesbloquearUsuariosMustPass()
	{

		// Pegando todos os usuários da base de dados
		List<Usuario> usuarios = this.usuarioRepository.findAll();
		boolean testIsAccountNonLocked = false;
		boolean testIsEnable = false;
		List<Long> listIds = new ArrayList<Long>();
		// Pegando todos os ids dos usuários
		for ( Usuario usuario : usuarios )
		{
			listIds.add( usuario.getId() );
		}

		// Instanciado datas de bloqueio
		Calendar dataBloqueio = Calendar.getInstance();
		Calendar dataDesbloqueio = Calendar.getInstance();
		dataBloqueio.set( Calendar.DAY_OF_YEAR, 02 );
		dataDesbloqueio.set( Calendar.DAY_OF_YEAR, 300 );

		// Bloqueando todo mundo
		this.usuarioService.bloquearUsuarios( listIds, dataBloqueio, null );

		usuarios = this.usuarioService.listUsuariosByFiltersAndBloqueados( null, null ).getContent();
		for ( Usuario usuario : usuarios )
		{
			testIsAccountNonLocked = usuario.isAccountNonLocked();
			testIsEnable = usuario.isEnabled();
		}

		// Verificando se todo mundo esta bloqueado e inativo
		Assert.assertNotNull( testIsAccountNonLocked );
		Assert.assertNotNull( testIsEnable );
		Assert.assertFalse( testIsAccountNonLocked );
		Assert.assertFalse( testIsEnable );

		// Desbloqueando todo mundo
		this.usuarioService.desbloquearUsuarios( listIds );
		// Restaurando todo mundo (para que o usuário esteja como 'isEnabled' ele não pode estar excluído)
		this.usuarioService.restaurarUsuarios( listIds );

		usuarios = this.usuarioService.listUsuariosByFilters( null, null ).getContent();
		for ( Usuario usuario : usuarios )
		{
			testIsAccountNonLocked = usuario.isAccountNonLocked();
			testIsEnable = usuario.isEnabled();
		}

		// Verificando se todo mundo esta bloqueado e inativo
		Assert.assertNotNull( testIsAccountNonLocked );
		Assert.assertNotNull( testIsEnable );
		Assert.assertTrue( testIsAccountNonLocked );
		Assert.assertTrue( testIsEnable );

	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml" })
	public void excluirAndRestaurarUsuariosMustPass()
	{
		// Pegando todos os usuários da base de dados
		List<Usuario> usuarios = this.usuarioRepository.findAll();
		boolean testIsEnable = false;
		List<Long> listIds = new ArrayList<Long>();
		// Pegando todos os ids dos usuários
		for ( Usuario usuario : usuarios )
		{
			listIds.add( usuario.getId() );
		}

		// Excluindo todo mundo
		this.usuarioService.excluirUsuarios( listIds );

		usuarios = this.usuarioService.listUsuariosByFiltersAndExcluidos( null, null ).getContent();
		for ( Usuario usuario : usuarios )
		{
			testIsEnable = usuario.isEnabled();
		}

		// Verificando se todo mundo esta excluido
		Assert.assertNotNull( testIsEnable );
		Assert.assertFalse( testIsEnable );

		// Restaurando todo mundo
		this.usuarioService.restaurarUsuarios( listIds );
		// Desbloqueando todo mundo (para que o usuário esteja como 'isEnabled' ele não pode estar bloqueado)
		this.usuarioService.desbloquearUsuarios( listIds );

		usuarios = this.usuarioService.listUsuariosByFilters( null, null ).getContent();
		for ( Usuario usuario : usuarios )
		{
			testIsEnable = usuario.isEnabled();
		}

		// Verificando se todo mundo esta bloqueado e inativo
		Assert.assertNotNull( testIsEnable );
		Assert.assertTrue( testIsEnable );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml", "/dataset/aplicativo/AplicativoDataSet.xml", "/dataset/aplicativo/PerfilAcessoDataSet.xml", "/dataset/usuario/PerfilUsuarioAplicativoDataSet.xml", })
	public void replicarUsuariosMustPass()
	{

		this.usuarioService.replicarPerfisAcesso( 4L, Arrays.asList( 2L, 3L ) );

		PerfilUsuarioAplicativo test = this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 3L, null ).getContent().get( 0 );

		PerfilUsuarioAplicativo test2 = this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 4L, null ).getContent().get( 0 );

		Assert.assertEquals( this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 4L, null ).getContent().size(), 1 );
		Assert.assertEquals( this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 2L, null ).getContent().size(), 1 );
		Assert.assertEquals( this.usuarioService.listPerfilUsuarioAplicativoByUsuarioId( 3L, null ).getContent().size(), 1 );
		Assert.assertEquals( test.getPerfilAcesso().getId(), test2.getPerfilAcesso().getId() );
	}

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml" })
	public void uploadAndRemoveFotoMustPass() throws IOException, RepositoryException
	{

		final FileInputStream file = new FileInputStream( this.getClass().getResource( "/foto.jpg" ).getPath() );
		final FileTransfer fileTransfer = new FileTransfer( "test.jpg", "application/jpg", file );

		this.usuarioService.uploadFoto( fileTransfer, 1L );

		this.usuarioService.removeFoto( 1L );
	}

	/**
	 * TODO fazer os testes daqui pra baixo
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/usuario/UsuarioDataSet.xml" })
	public void listPerfilUsuarioAplicativoHistoricoByUsuarioIdMustPass() 
	{
		Assert.assertNotNull( this.usuarioService.listPerfilUsuarioAplicativoHistoricoByUsuarioId( 1L, null ) );

	}
}