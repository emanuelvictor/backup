package br.mil.mar.dabm.autenticador.domain.service;

import java.io.IOException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;

import javax.jcr.RepositoryException;

import org.directwebremoting.annotations.RemoteProxy;
import org.directwebremoting.io.FileTransfer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.security.authentication.dao.SaltSource;
import org.springframework.security.authentication.encoding.ShaPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import br.com.eits.common.infrastructure.jcr.MetaFile;
import br.com.eits.common.infrastructure.jcr.modeshape.MetaFileRepository;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.PerfilAcesso;
import br.mil.mar.dabm.autenticador.domain.entity.usuario.PerfilUsuarioAplicativo;
import br.mil.mar.dabm.autenticador.domain.entity.usuario.Usuario;
import br.mil.mar.dabm.autenticador.domain.repository.IUsuarioMailRepository;
import br.mil.mar.dabm.autenticador.domain.repository.usuario.IPerfilUsuarioAplicativoRepository;
import br.mil.mar.dabm.autenticador.domain.repository.usuario.IUsuarioRepository;

/**
 * 
 * @author rodrigo@eits.com.br
 */
@Service
@Transactional
@RemoteProxy(name = "usuarioService")
public class UsuarioService
{
	/*-------------------------------------------------------------------
	 *				 		     ATTRIBUTES
	 *-------------------------------------------------------------------*/
	/**
	 * Password encoder
	 */
	@Autowired
	private ShaPasswordEncoder passwordEncoder;

	/**
	 * Hash generator for encryption
	 */
	@Autowired
	private SaltSource saltSource;

	// Repositories
	/**
	 * 
	 */
	@Autowired
	private IUsuarioRepository usuarioRepository;
	/**
	 * repositório utilizado para salvar as fotos
	 */
	@Autowired
	private MetaFileRepository metaFileRepository;
	/**
	 * repositório utilizado para enviar emails
	 */
	@Autowired
	private IUsuarioMailRepository usuarioMailRepository;
	/**
	 * 
	 */
	@Autowired
	private IPerfilUsuarioAplicativoRepository perfilUsuarioAplicativoRepository;

	/*-------------------------------------------------------------------
	 *				 		     SERVICES
	 *-------------------------------------------------------------------*/
	/**
	 * 
	 * @param usuario
	 * @return
	 */
	public Usuario insertUsuario( Usuario usuario )
	{
		final String encodedPassword = this.passwordEncoder.encodePassword( usuario.getPassword(), saltSource.getSalt( usuario ) );
		usuario.setSenha( encodedPassword );
		return this.usuarioRepository.save( usuario );
	}

	/**
	 * 
	 * @param usuario
	 * @return
	 */
	public Usuario updateUsuario( Usuario usuario )
	{
		return this.usuarioRepository.save( usuario );
	}

	/**
	 * 
	 * @param id
	 * @return
	 */
	@Transactional(readOnly = true)
	public Usuario findUsuarioById( Long id )
	{
		return this.usuarioRepository.findOne( id );
	}

	/**
	 * 
	 * @param usuariosId
	 * @param dataBloqueio
	 * @param dataDesbloqueio
	 */
	public void bloquearUsuarios( List<Long> usuariosId, Calendar dataBloqueio, Calendar dataDesbloqueio )
	{
		for ( Usuario usuario : this.usuarioRepository.findAll( usuariosId ) )
		{
			usuario.setDataBloqueio( dataBloqueio );
			usuario.setDataDesbloqueio( dataDesbloqueio );
			this.updateUsuario( usuario );
		}
	}

	/**
	 * 
	 * @param usuariosId
	 */
	public void desbloquearUsuarios( final List<Long> usuariosId )
	{
		for ( Usuario usuario : this.usuarioRepository.findAll( usuariosId ) )
		{
			usuario.desbloquear();
			this.updateUsuario( usuario );
		}
	}

	/**
	 * 
	 * @param usuarioId
	 * @param senhaAtual
	 * @param novaSenha
	 */
	public void changeSenhaUsuario( final Long usuarioId, final String senhaAtual, String novaSenha )
	{
		Usuario usuario = this.usuarioRepository.findOne( usuarioId );

		final String senhaConfirmacao = this.passwordEncoder.encodePassword( senhaAtual, saltSource.getSalt( usuario ) );

		final String senhaAntiga = usuario.getPassword();

		if ( senhaAntiga.equals( senhaConfirmacao ) )
		{
			this.changeSenhaUsuario( usuarioId, novaSenha );
		}
	}

	/**
	 * 
	 * @param usuarioId
	 * @param novaSenha
	 */
	public void changeSenhaUsuario( final Long usuarioId, final String novaSenha )
	{
		Usuario usuario = this.usuarioRepository.findOne( usuarioId );
		final String encodedPassword = this.passwordEncoder.encodePassword( novaSenha, saltSource.getSalt( usuario ) );
		usuario.setSenha( encodedPassword );
		usuario.setDataAlteracaoSenha( Calendar.getInstance() );
		this.enviarEmail( this.usuarioRepository.save( usuario ).getId() );
	}

	/**
	 * 
	 * @param usuarioId
	 * @param pageable
	 * @return
	 */
	public Page<PerfilUsuarioAplicativo> listPerfilUsuarioAplicativoByUsuarioId( Long usuarioId, PageRequest pageable )
	{
		return this.perfilUsuarioAplicativoRepository.findPerfilUsuarioAplicativosByUsuarioId( usuarioId, pageable );
	}

	/**
	 * 
	 * @param idUsuario
	 */
	private void enviarEmail( Long idUsuario )
	{
		this.usuarioMailRepository.sendRecuperarSenha( this.usuarioRepository.findOne( idUsuario ) );
	}

	/**
	 * 
	 * @param login
	 * @return
	 */
	public boolean checkLogin( String login )
	{
		return this.usuarioRepository.findByLogin( login ) != null;
	}

	/**
	 * 
	 * @param email
	 * @return
	 */
	public boolean checkEmail( String email )
	{
		return this.usuarioRepository.findByEmail( email ) != null;
	}

	/**
	 * @param id
	 * @return
	 */
	public void removeUsuario( Long id )
	{
		Usuario usuario = this.usuarioRepository.findOne( id );
		usuario.setDataExclusao( Calendar.getInstance() );
		this.updateUsuario( usuario );
	}

	/**
	 * 
	 * @param perfilAcessoId
	 * @param usuarioId
	 * @return
	 */
	public PerfilUsuarioAplicativo insertPerfilUsuarioAplicativo( Long perfilAcessoId, Long usuarioId )
	{
		return this.perfilUsuarioAplicativoRepository.save( new PerfilUsuarioAplicativo( null, new PerfilAcesso( perfilAcessoId ), new Usuario( usuarioId ) ) );
	}

	/**
	 * 
	 * @param usuariosId
	 */
	public void excluirUsuarios( List<Long> usuariosId )
	{
		for ( Usuario usuario : this.usuarioRepository.findAll( usuariosId ) )
		{
			usuario.setDataExclusao( Calendar.getInstance() );
			this.updateUsuario( usuario );
		}
	}

	/**
	 * @param usuariosId
	 */
	public void restaurarUsuarios( List<Long> usuariosId )
	{
		for ( Usuario usuario : this.usuarioRepository.findAll( usuariosId ) )
		{
			usuario.setDataExclusao( null );
			this.updateUsuario( usuario );
		}
	}

	/**
	 * 
	 * @param idUsuario
	 */
	private void removePerfisAcesso( final List<Long> idUsuario )
	{
		// Removendo perfis de acesso
		for ( Long id : idUsuario )
		{
			List<PerfilUsuarioAplicativo> listPerfilUsuarioAplicativo = this.listPerfilUsuarioAplicativoByUsuarioId( id, null ).getContent();
			this.perfilUsuarioAplicativoRepository.deleteInBatch( listPerfilUsuarioAplicativo );
		}
	}

	/**
	 * 
	 * @param idUsuarioOrigem
	 * @param listIdUsuarioDestino
	 */
	public void replicarPerfisAcesso( final Long idUsuarioOrigem, final List<Long> listIdUsuarioDestino )
	{	
		Assert.notNull( idUsuarioOrigem, "O usuário de origem não pode ser nulo" );
		Assert.notNull( listIdUsuarioDestino, "Os usuários de destino não podem ser nulos" );
		
		// Removendo perfis de acesso anteriores. Obs: Isso está nos requisitos, o usuário de destino perde todos perfis e recebe somente os novos
		this.removePerfisAcesso( listIdUsuarioDestino );

		// Puxando perfis do usuário de origem
		List<PerfilUsuarioAplicativo> listPerfilUsuarioAplicativo = this.listPerfilUsuarioAplicativoByUsuarioId( idUsuarioOrigem, null ).getContent();

		// Adicionando novos perfis de acesso
		// FIXME aperfeiçoar isso
		for ( PerfilUsuarioAplicativo perfilUsuarioAplicativo : listPerfilUsuarioAplicativo )
		{
			for ( Long idUsuarioDestino : listIdUsuarioDestino )
			{
				this.insertPerfilUsuarioAplicativo( perfilUsuarioAplicativo.getPerfilAcesso().getId(), idUsuarioDestino );
			}
		}
	}

	/**
	 * 
	 * @param perfilUsuarioAplicativoId
	 */
	public void removePerfilUsuarioAplicativo( Long perfilUsuarioAplicativoId )
	{
		this.perfilUsuarioAplicativoRepository.delete( perfilUsuarioAplicativoId );
	}

	/**
	 * 
	 * @param fileTransfer
	 * @param usuarioId
	 * @throws IOException
	 * @throws RepositoryException
	 */
	public void uploadFoto( FileTransfer fileTransfer, Long usuarioId )
	{
		Assert.notNull( fileTransfer, "O arquino nao pode ser nulo" );
		Assert.notNull( usuarioId, "O usuário não pode ser nulo" );
		Assert.isTrue( !Arrays.asList(Usuario.ICONE_MIME_TYPES).contains(fileTransfer.getMimeType()) );
		
		try
		{
			MetaFile metaFile = new MetaFile();

			metaFile.setContentType( fileTransfer.getMimeType() );
			metaFile.setFolder( String.format( Usuario.FOTO_PATH, usuarioId ) );
			metaFile.setName( fileTransfer.getFilename() );

			metaFile.setInputStream( fileTransfer.getInputStream() );

			metaFile.setId( usuarioId.toString() );
//		metaFile.setCreatedBy( ContextHolder.getAuthenticatedUser().getId().toString() );

			System.out.println( metaFile.getPath() );

			metaFile = this.metaFileRepository.insert( metaFile );
		}
		catch ( Exception e )
		{
			throw new RuntimeException( "Não foi possível realizar o upload do arquivo." );
		}
	}

	/**
	 * 
	 * @param usuarioId
	 * @throws RepositoryException
	 */
	public void removeFoto( Long usuarioId ) throws RepositoryException
	{
		this.metaFileRepository.remove( usuarioId.toString() );
	}

	/**
	 * @Transactional(readOnly = true)
	 * @param filters
	 * @param pageable
	 * @return
	 */
	public Page<Usuario> listUsuariosByFilters( String filters, PageRequest pageable )
	{
		return this.usuarioRepository.listByFilters( filters, Calendar.getInstance(), pageable );
	}

	/**
	 * 
	 * @param filters
	 * @param pageable
	 * @return
	 */
	@Transactional(readOnly = true)
	public Page<Usuario> listUsuariosByFiltersAndBloqueados( String filters, PageRequest pageable )
	{
		return this.usuarioRepository.listByFiltersAndBloqueados( filters, Calendar.getInstance(), pageable );
	}

	/**
	 * 
	 * @param filters
	 * @param pageable
	 * @return
	 */
	@Transactional(readOnly = true)
	public Page<Usuario> listUsuariosByFiltersAndExcluidos( String filters, PageRequest pageable )
	{
		return this.usuarioRepository.listByFiltersAndExcluidos( filters, pageable );
	}

	/**
	 * 
	 * @param usuarioId
	 * @param pageable
	 * @return
	 */
	// TODO Não implementado
	public Page<PerfilUsuarioAplicativo> listPerfilUsuarioAplicativoHistoricoByUsuarioId( Long usuarioId, PageRequest pageable )
	{
		return null;
	}

}