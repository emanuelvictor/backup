package br.mil.mar.dabm.autenticador.domain.repository.usuario;

import java.util.Calendar;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import br.mil.mar.dabm.autenticador.domain.entity.usuario.Usuario;

/**
 * 
 * FIXME VERIFICAR POSSIBILIDADE DE POR EM UMA QUERY SOMENTE
 * 
 * @author emanuelvictor 
 * @version 1.0
 * @category Repository
 */
public interface IUsuarioRepository extends JpaRepository<Usuario, Long> 
{
	/**
	 * 
	 * @param login
	 * @return
	 */
	public Usuario findByLogin( String login);
	
	/**
	 * 
	 * @param filters
	 * @param dataHoje
	 * @param pageable
	 * @return
	 */
	@Query("SELECT new Usuario( usuario.id, null, usuario.nomeCompleto, usuario.login, usuario.email, usuario.dataAlteracaoSenha, usuario.dataBloqueio, usuario.dataDesbloqueio, usuario.dataExclusao, usuario.dataExpiracaoSenha, usuario.dataUltimoAcesso, usuario.alterarSenha ) " +
			   "FROM Usuario usuario " +
			  "WHERE ( (FILTER(usuario.nomeCompleto, :filters) = TRUE "
				  	 + "OR FILTER(usuario.login, :filters) = TRUE "
				  	 + "OR FILTER(usuario.email, :filters) = TRUE) "
				  	 + "AND (usuario.dataDesbloqueio < :dataHoje OR usuario.dataBloqueio IS NULL))")
	public Page<Usuario> listByFilters( @Param("filters") String filters,
										@Param("dataHoje") Calendar dataHoje,
										Pageable pageable );
	/**
	 * 
	 * @param filters
	 * @param dataHoje
	 * @param pageable
	 * @return
	 */
	@Query("SELECT new Usuario( usuario.id, null, usuario.nomeCompleto, usuario.login, usuario.email, usuario.dataAlteracaoSenha, usuario.dataBloqueio, usuario.dataDesbloqueio, usuario.dataExclusao, usuario.dataExpiracaoSenha, usuario.dataUltimoAcesso, usuario.alterarSenha ) " +
			   "FROM Usuario usuario " +
			  "WHERE ( (FILTER(usuario.nomeCompleto, :filters) = TRUE "
				  	 + "OR FILTER(usuario.login, :filters) = TRUE "
				  	 + "OR FILTER(usuario.email, :filters) = TRUE) "
				  	 + "AND (:dataHoje BETWEEN usuario.dataBloqueio AND usuario.dataDesbloqueio))")
	public Page<Usuario> listByFiltersAndBloqueados( @Param("filters") String filters,
													 @Param("dataHoje") Calendar dataHoje,
													 Pageable pageable );
	/**
	 * 
	 * @param filters
	 * @param pageable
	 * @return
	 */
	@Query("SELECT new Usuario( usuario.id, null, usuario.nomeCompleto, usuario.login, usuario.email, usuario.dataAlteracaoSenha, usuario.dataBloqueio, usuario.dataDesbloqueio, usuario.dataExclusao, usuario.dataExpiracaoSenha, usuario.dataUltimoAcesso, usuario.alterarSenha ) " +
			   "FROM Usuario usuario " +
			  "WHERE ( (FILTER(usuario.nomeCompleto, :filters) = TRUE "
				  	 + "OR FILTER(usuario.login, :filters) = TRUE "
				  	 + "OR FILTER(usuario.email, :filters) = TRUE) "
				  	 + "AND (usuario.dataExclusao IS NOT NULL))")
	public Page<Usuario> listByFiltersAndExcluidos( @Param("filters") String filters, 
													Pageable pageable );
	/**
	 * 
	 */
	public Usuario findByEmail( String email );
	
}
