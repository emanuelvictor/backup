(function (angular) {
    'use strict';

    /**
     *
     * @param $scope
     * @param $state
     */
    angular.module('autenticador')
        .controller('UsuarioController', function ($scope, $state, $importService, $mdToast, $mdDialog, $log, $timeout, $q, $filter) {


            /**
             * Serviços importados do DWR
             */
            $importService("usuarioService");
            $importService("aplicativoService");



            /*-------------------------------------------------------------------
             * 		 				 	ATTRIBUTES
             *-------------------------------------------------------------------*/
            //----STATES
            /**
             * Representa o estado de listagem de registros.
             */
            $scope.LIST_STATE = "usuario.list";
            /**
             * Representa o estado para a criação de registros.
             */
            $scope.ADD_STATE = "usuario.add";
            /**
             * Representa o estado para a edição de registros.
             */
            $scope.EDIT_STATE = "usuario.edit";
            /**
             * Representa o estado de detalhe de um registro.
             */
            $scope.DETAIL_STATE = "usuario.detail";

            //----FORM MODEL

            /**
             * Contém o estados dos filtros da tela
             * Contém estado da paginação inicial contendo sorting
             *
             */
            $scope.model = {
                form: null,
                entity: new Usuario(),

                filters: {
                    terms: [],
                    ativo: true
                },
                page: {//PageImpl
                    content: null,
                    pageable: {//PageRequest
                        size: 5,
                        page: 0,
                        sort: {//Sort
                            orders: [
                                {direction: 'ASC', property: 'nomeCompleto'}
                            ]
                        }
                    }
                }
            };

            /*-------------------------------------------------------------------
             * 		 				  POST CONSTRUCT
             *-------------------------------------------------------------------*/
            /**
             * Handler que escuta as mudanças de URLs pertecentes ao estado da tela.
             * Ex.: list, add, detail, edit
             *
             * Toda vez que ocorre uma mudança de URL se via botão, troca de URL manual, ou ainda
             * ao vançar e voltar do browser, este evento é chamado.
             *
             */
            $scope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {

                if($state.current.name != $scope.LIST_STATE)
                  $state.current.breadCrumbs = [{'state': $scope.LIST_STATE, 'name': 'Usuarios'}];


                switch ($state.current.name) {
                    case $scope.LIST_STATE:
                    {
                        $scope.changeToList(false);
                        break;
                    }
                    case $scope.DETAIL_STATE:
                    {
                        $scope.changeToDetail($state.params.id);
                        break;
                    }
                    case $scope.ADD_STATE:
                    {
                        $scope.changeToAdd();
                        break;
                    }
                    case $scope.EDIT_STATE:
                    {
                        $scope.changeToEdit($state.params.id);
                        break;
                    }
                    default :
                    {
                        $state.go($scope.LIST_STATE);
                    }
                }
            });

            /*-------------------------------------------------------------------
             * 		 				 	  HANDLERS
             *-------------------------------------------------------------------*/
            /**
             * Handler para que realiza os procedimentos iniciais (prepara o estado)
             * para a tela de inserção e após isso, muda o estado para $scope.ADD_STATE.
             *
             * @see $scope.ADD_STATE
             */
            $scope.changeToAdd = function () {
                console.debug("changeToAdd");

                $scope.model.entity = new Usuario();//Limpa o formulário

                $scope.model.entity.dataBloqueio = undefined;
                $scope.model.entity.dataDesbloqueio = undefined;
                
                $state.current.breadCrumbs.push({name: 'Novo usuário'});
            };

            
            

            /**
             * Realiza os procedimentos iniciais (prepara o estado)
             * para a tela de edição e após isso, muda o estado para update.
             *
             * Para mudar para este estado, deve-se primeiro obter via id
             * o registro pelo serviço de consulta e só então mudar o estado da tela.
             *
             * @see $scope.EDIT_STATE
             */
            $scope.changeToEdit = function (id) {
                console.debug("changeToEdit", id);
                
                usuarioService.findUsuarioById(id, {
                    callback: function (result) {
                        $scope.model.entity = result;
                        
                        $state.current.breadCrumbs.push({name: result.nomeCompleto});
                        
                        // date-picker não aceita objeto do tipo null
                        if($scope.model.entity.dataExpiracaoSenha == null) $scope.model.entity.dataExpiracaoSenha = undefined;
                        // date-picker não aceita objeto do tipo null
                        if($scope.model.entity.dataBloqueio == null) $scope.model.entity.dataBloqueio = undefined;
                        // date-picker não aceita objeto do tipo null
                        if($scope.model.entity.dataDesbloqueio == null) $scope.model.entity.dataDesbloqueio = undefined;

                        // Certifica-se de que a variável aplicativo sempre esteja null quando a controller for carregada
                        $scope.aplicativos = null;
                        $scope.$apply();
                    },
                    errorHandler: function (message, exception) {
                        $mdToast.showSimple(message);
                        $state.go($scope.LIST_STATE);
                        $scope.$apply();
                    }
                });
            };

            /**
             * Realiza os procedimentos iniciais (prepara o estado)
             * para a tela de consulta e após isso, muda o estado para list.
             * Para mudar para este estado, deve-se primeiro carregar os dados da consulta.
             *
             * @see $scope.LIST_STATE
             *
             * @param paginate boolean para saber se precisa paginar
             */
            $scope.changeToList = function (paginate) {
                console.debug("changeToList");

                if (paginate) $scope.model.page.pageable.page++;

                $scope.listUsuariosByFilter($scope.model.filters, $scope.model.page.pageable);
            };

             /**
             * Realiza os procedimentos iniciais (prepara o estado)
             * para a tela de detalhe e após isso, muda o estado para detail.
             *
             * Para mudar para este estado, deve-se primeiro obter via id
             * o registro atualizado pelo serviço de consulta e só então mudar o estado da tela.
             *
             * @see $scope.DETAIL_STATE
             */
            $scope.changeToDetail = function (id) {
                console.debug("changeToDetail", id);

                usuarioService.findUsuarioById(id, {
                    callback: function (result) {
                        $scope.model.entity = result;
                        $state.go($scope.DETAIL_STATE, {id: id});

                        $state.current.breadCrumbs.push({name: result.nomeCompleto});

                        $scope.dataExpiracaoSenha = moment($scope.model.entity.dataExpiracaoSenha).format('DD/MM/YYYY hh:mm');
                        $scope.dataBloqueio = moment($scope.model.entity.dataBloqueio).format('DD/MM/YYYY hh:mm');
                        $scope.dataDesbloqueio = moment($scope.model.entity.dataDesbloqueio).format('DD/MM/YYYY hh:mm');
                        $scope.$apply();
                    },
                    errorHandler: function (message, exception) {
                        $mdToast.showSimple(message);
                        $state.go($scope.LIST_STATE);
                        $scope.$apply();
                    }
                });
            };

            /**
             * Realiza os procedimentos iniciais (prepara o estado)
             * para a tela de exclusão.
             * Antes de excluir, o usuário notificado para confirmação e só então o registro é excluido.
             */
            $scope.changeToRemove = function (event, entity) {
                console.debug("changeToRemove", entity);

                var confirm = $mdDialog.confirm()
                    .title('Tem certeza que deseja excluir este registro?')
                    .content('Não será possível recuperar este registro se for excluído.')
                    .ok('Sim')
                    .cancel('Cancelar')
                    .targetEvent(event);

                $mdDialog.show(confirm).then(function (result) {
                    console.log(result);

                    usuarioService.removeUsuarios([entity.id], {
                        callback: function (result) {
                            $mdToast.showSimple("O registro foi excluído com sucesso!");
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                            $scope.$apply();
                        }
                    });
                });
            };

            /**
             * Realiza a inserção de um novo registro
             * e no suscesso, modifica o estado da tela para o detail.
             */
            $scope.insertHandler = function () {
                console.debug("insertHandler");

                if ($scope.model.form.$invalid) {
                    $mdToast.showSimple("Fomulário inválido");
                    return;
                }

                usuarioService.insertUsuario($scope.model.entity, {
                    callback: function (result) {
                        $mdToast.showSimple("Registro salvo com sucesso!");
                        $state.go($scope.DETAIL_STATE, {id: result.id});
                        $scope.$apply();
                    },
                    errorHandler: function (message, exception) {
                        $mdToast.showSimple(message);
                        $scope.$apply();
                    }
                });
            };

            /**
             * Realiza a inserção de um novo registro
             * e no suscesso, modifica o estado da tela para o detail.
             */
            $scope.updateHandler = function () {
                console.debug("updateHandler");
                console.log($scope.model.entity);
                usuarioService.updateUsuario($scope.model.entity, {
                    callback: function (result) {
                        $mdToast.showSimple("Registro atualizado com sucesso!");
                        $state.go($scope.DETAIL_STATE, {id: result.id});
                        $scope.$apply();
                    },
                    errorHandler: function (message, exception) {
                        $mdToast.showSimple(message);
                        $scope.$apply();
                    }
                });
            };

            

            function ReplicarCtrl(scope, $mdDialog, $q, usuario) {

                scope.usuario = usuario;

                scope.selectedItem = null;
                scope.searchText = null;
                scope.querySearch = querySearch;
                scope.usuarioSelecionado = [];
                
                function querySearch(query) {
                    var deferred = $q.defer();

                    usuarioService.listUsuariosByFilters(query, null, {
                        callback: function (result) {
                            deferred.resolve(result.content);
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                        }
                    });

                    return deferred.promise;
                }

                scope.reply = function () {
                    console.log(usuario, scope.usuarioSelecionado);
                    usuarioService.replicarPerfisAcesso(usuario, scope.usuarioSelecionado, {
                        callback: function (result) {
                            $mdToast.showSimple('Replicado com sucesso');
                            scope.usuarioSelecionado = [];
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                        }
                    });
                };

                scope.hide = function () {
                    $mdDialog.hide();
                };
                scope.cancel = function () {
                    $mdDialog.cancel();
                };
                scope.answer = function (answer) {
                    $mdDialog.hide(answer);
                };
            }

            $scope.replyProfile = function (event, usuario) {

                $mdDialog.show({
                    controller: ReplicarCtrl,
                    templateUrl: 'modules/autenticador/views/usuario/usuario-replicar-perfil.jsp',
                    targetEvent: event,
                    locals: {
                        usuario: usuario
                    }
                }).then(function (answer) {
                    $scope.alert = 'You said the information was "' + answer + '".';
                }, function () {
                   $scope.alert = 'You cancelled the dialog.';
                });
            };

            function BloquearUsuariosController($scope, $mdDialog, usuarios) {
               $scope.dataBloqueio = new Date();
                
               $scope.bloquear = function (dataBloqueio,dataDesbloqueio) {
                    usuarioService.bloquearUsuarios(usuarios, dataBloqueio, dataDesbloqueio, {
                        callback: function (result) {
                            $scope.answer(result);
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                        }
                    });
                };

                $scope.hide = function () {
                    $mdDialog.hide();
                };

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };

                $scope.answer = function (answer) {
                    $mdDialog.hide(answer);
                };
            };
             
            $scope.bloquearUsuarios = function (ev, usuarios) {
                if($state.current.name != $scope.LIST_STATE){
                  usuarios = new Array(usuarios);
                };
                $mdDialog.show({
                  controller: BloquearUsuariosController,
                  templateUrl: 'modules/autenticador/views/usuario/usuario-bloquear.jsp',
                    targetEvent: ev,
                    locals: {
                      usuarios: usuarios
                    } 
                }).then(function (answer) {
                   if($state.current.name != $scope.LIST_STATE){
                     $scope.model.entity = answer[0];
                   }else{
                     $scope.model.entity = answer;            
                   }
                }, function () {
                  $scope.alert = 'You cancelled the dialog.';
                });
            };

            $scope.desbloquearUsuarios = function (usuarios) {
              if($state.current.name != $scope.LIST_STATE){
                usuarios = new Array(usuarios);
              };
              usuarioService.desbloquearUsuarios(usuarios, {
                callback: function (result) {
                  if($state.current.name != $scope.LIST_STATE){
                    $scope.model.entity  = result[0];
                    $mdToast.showSimple( 'Usuário desbloqueado com sucesso' );
                  }else{
                    $scope.model.entity  = result;
                    $mdToast.showSimple( 'Usuários desbloqueados com sucesso' );
                  };
                },
                errorHandler : function(message, exception) {
                  $mdToast.showSimple( message );
                }
              });
            };

            function ExcluirUsuariosController($scope, $mdDialog, usuarios) {

               $scope.excluir = function () {
                    usuarioService.excluirUsuarios(usuarios, {
                        callback: function (result) {
                            $scope.answer(result);
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                        }
                    });
                };

                $scope.hide = function () {
                    $mdDialog.hide();
                };

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };

                $scope.answer = function (answer) {
                    $mdDialog.hide(answer);
                };
            };

             
            $scope.excluirUsuarios = function (ev, usuarios) {
                if($state.current.name != $scope.LIST_STATE){
                  usuarios = new Array(usuarios);
                };
                $mdDialog.show({
                  controller: ExcluirUsuariosController,
                  templateUrl: 'modules/autenticador/views/usuario/usuario-excluir.jsp',
                  targetEvent: ev,
                  locals: {
                    usuarios: usuarios
                  } 
                }).then(function (answer) {
                  if($state.current.name != $scope.LIST_STATE){
                   $scope.model.entity = answer[0];
                  }else{
                   $scope.model.entity = answer;            
                  }
                },function () {
                  $scope.alert = 'You cancelled the dialog.';
                });
            };

            //Função para retornar o usuário logado
            $scope.removePerfilUsuarioAplicativo = function (aplicativo, perfisUsuarioAplicativo) {
              usuarioService.removePerfilUsuarioAplicativo($filter('filter')(perfisUsuarioAplicativo, aplicativo.endereco), {
                callback: function () {
                  $scope.aplicativos.splice( $scope.aplicativos.indexOf(aplicativo), 1 );
                  $scope.$apply();
                }
              });
            };

            $scope.restaurarUsuarios = function (usuarios) {
              if($state.current.name != $scope.LIST_STATE){
                usuarios = new Array(usuarios);
              };
              usuarioService.restaurarUsuarios(usuarios, {
                callback: function (result) {
                  if($state.current.name != $scope.LIST_STATE){
                    $scope.model.entity  = result[0];
                    $mdToast.showSimple( 'Usuário restaurado com sucesso' );
                  }else{
                    $scope.model.entity  = result;
                    $mdToast.showSimple( 'Usuários restaurados com sucesso' );
                  };
                },
                errorHandler : function(message, exception) {
                  $mdToast.showSimple( message );
                }
              });
            };


            $scope.redefinirSenha = function (ev, usuario) {
                $mdDialog.show({
                    controller: RedefinirSenhaController,
                    templateUrl: 'modules/autenticador/views/usuario/usuario-modal-reset-password.jsp',
                    targetEvent: ev,
                    locals: {
                        usuario: usuario
                    } 
                })
            };

            function RedefinirSenhaController(usuario, $scope) {

                $scope.redefinir = function (newPassword) {
                    $scope.enviandoEmail = true;
                    usuarioService.changeSenhaUsuario(usuario.id, newPassword, {
                        callback: function () {
                            $mdDialog.hide();
                            $mdToast.showSimple( 'Senha alterada com sucesso' );
                        },
                        errorHandler : function(message, exception) {
                            $mdToast.showSimple( message );
                        }
                    });

                };

                $scope.hide = function () {
                    $mdDialog.hide();
                };

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };

                $scope.answer = function () {
                    $mdDialog.hide();
                };
            };

            function AdicionarAplicativosController($scope, $mdDialog, usuario, aplicativoSelecionado, aplicativos, $q) {
                
                $scope.aplicativosSelecionados = [];

                //Se esta editando o objeto realiza a busca no mesmo
                aplicativoSelecionado ? $scope.searchText = aplicativoSelecionado.nome : $scope.searchText;

                // Variável no escopo que armazena os aplicativos
                $scope.aplicativos = [];
                
                // Variável no escopo que armazena os perfis vinculados à aplicativos
                $scope.perfisAplicativo = [];
             
                // Variável no escopo que armazena os perfis vinculados à usuários
                $scope.perfisUsuario = [];

                 // Serviço asyncrono para buscar os dados
                $scope.querySearch = function(query) {
                    var deferred = $q.defer();

                    aplicativoService.listAplicativosByFilters(query, true, null, {
                        callback: function (result) {
                            deferred.resolve(result.content);
                        },
                        errorHandler: function (message, exception) {
                            $mdToast.showSimple(message);
                        }
                    });

                    return deferred.promise;
                };

                // Pega todos os aplicativos
                $scope.getAplicativos = function(filters){
                    aplicativoService.listAplicativosByFilters( filters, true, null, {
                         callback: function (result) {
                              $scope.aplicativos = result.content;
                              $scope.notVoid = true;
                         }
                    });
                };


                //Pegando todos os aplicativos
                $scope.getAplicativos($scope.searchText);
                

                // Pega todos os perfis vinculados ao usuário
                $scope.getPerfisUsuario = function(){
                    $scope.perfisUsuario = new Array();
                    usuarioService.listPerfilUsuarioAplicativoByUsuarioId(usuario.id, null, {
                       callback: function (result) {
                           for (var i = 0; i < result.content.length; i++) {
                               $scope.perfisUsuario.push(result.content[i].perfilAcesso);    
                           }
                        }
                    });              
                };

                //Pegando todos os aplicativos
                $scope.getPerfisUsuario();
                                
                // Pega todos os perfis vinculados ao aplicativo
                $scope.getPerfisAplicativo = function(aplicativoId){
                    $scope.perfisAplicativo = new Array();
                    aplicativoService.listPerfisAcessoByAplicativoId( aplicativoId, {
                          callback: function (result) {
                               $scope.perfisAplicativo = result;
                          }
                    });         
                };
                
                $scope.selected = $scope.perfisUsuario;
                
                //Função de alternação entre os checkbox
                $scope.toggle = function (item, list) {
                   var idx = $scope.exists(item, list)
                   if(idx>-1){
                      list.splice(idx, 1);
                      usuarioService.removePerfilUsuarioAplicativo(usuario.id, item.id);
                   }else{
                      list.push(item);
                      usuarioService.insertPerfilUsuarioAplicativo(usuario.id, item.id);
                   }
                };

                //Função que verifica se o item exite na lista
                //Se existir retorna o index onde o item esta, se não retorna -1
                $scope.exists = isExistis;
                        
              $scope.hide = function () {
                usuarioService.listPerfilUsuarioAplicativoByUsuarioId(usuario.id, null, {
                    callback: function (result) {
                        for (var i = 0; i < result.content.length; i++) {
                           //SUBSTITUIR PELO $FILTER DO ANGULAR
                           if(isExistis(result.content[i].perfilAcesso.aplicativo, aplicativos)<0){
                               aplicativos.push(result.content[i].perfilAcesso.aplicativo)
                           }
                        }
                    }
                });
                $mdDialog.hide();
              };

                $scope.cancel = function () {
                    $mdDialog.cancel();
                };

                $scope.answer = function (answer) {
                    $mdDialog.hide(answer);
                };

            };

            $scope.showAddApp = function (ev, usuario, aplicativo) {
                $mdDialog.show({
                    controller: AdicionarAplicativosController,
                    templateUrl: 'modules/autenticador/views/usuario/usuario-add-aplicativo.jsp',
                    targetEvent: ev,
                    locals: {
                        usuario: usuario,
                        aplicativoSelecionado: aplicativo,
                        aplicativos: $scope.aplicativos,
                    }
                }).then(function (answer) {
                  
                }, function () {
                   $scope.alert = 'You cancelled the dialog.';
                });
            };

           

            /*-------------------------------------------------------------------
             * 		 				 PRIVATE BEHAVIORS
             *-------------------------------------------------------------------*/

            /**
             * Realiza a consulta de registros, consirando filtro, paginação e sorting.
             *
             * @see $scope.LIST_STATE
             * @see $scope.filters
             * @see $scope.page
             */
            $scope.listUsuariosByFilter = function (filters, pageRequest) {
                usuarioService.listUsuariosByFilters(filters.terms.toString(), pageRequest, {
                    callback: function (result) {
                        $scope.model.page.content = $scope.model.page.content ? $scope.model.page.content.concat(result.content) : $scope.model.page = result;
                        
                        $state.go($scope.LIST_STATE);
                        $scope.$apply();
                    },
                    errorHandler: function (message, exception) {
                        $mdToast.showSimple(message);
                        $scope.$apply();
                    }
                });
            };

           
            function HistoricoAplicativosController($scope, $mdDialog) {
                $scope.hide = function () {
                    $mdDialog.hide();
                };
                $scope.cancel = function () {
                    $mdDialog.cancel();
                };
                $scope.answer = function (answer) {
                    $mdDialog.hide(answer);
                };
            };

            $scope.showAdvanced = function (ev) {
                $mdDialog.show({
                    controller: HistoricoAplicativosController,
                    templateUrl: 'modules/autenticador/views/usuario/usuario-historico-aplicativo.jsp',
                    targetEvent: ev
                })
                    .then(function (answer) {
                        $scope.alert = 'You said the information was "' + answer + '".';
                    }, function () {
                        $scope.alert = 'You cancelled the dialog.';
                    });
            };


            $scope.onCloseEventHandler = function(){
                $scope.aplicativos = null; 
                $scope.$apply();      
            };
            
            /**
             * Retorna todos os aplicativos deste usuário
             *
             * @see $scope.LIST_STATE
             * @see $scope.filters
             * @see $scope.page
             */
            $scope.onOpenEventHandler = function () {
                $scope.aplicativos = new Array();
                usuarioService.listPerfilUsuarioAplicativoByUsuarioId($scope.model.entity.id, null, {
                    callback: function (result) {
                        $scope.perfisUsuarioAplicativo = result.content;
                        for (var i = 0; i < result.content.length; i++) {
                           //SUBSTITUIR PELO $FILTER DO ANGULAR
                           if(isExistis(result.content[i].perfilAcesso.aplicativo, $scope.aplicativos)<0){
                               $scope.aplicativos.push(result.content[i].perfilAcesso.aplicativo)
                           }
                        }
                        $scope.$apply();
                    }
                });
            };

        })

        // Filtro utilizado para tornar a primeira letra da string maiúscula
        .filter('firstUpper', function(){
            return function(input){
                return input.charAt(0).toUpperCase() + input.substring(1).toLowerCase();
            }
        })
        // Filtro que converte um array para string
        .filter('arrayToString', function(){
            return function(array, aplicativoId){
                 var stringFormatted = '';
                 for (var i = 0; i < array.length; i++) {
                    if(aplicativoId == array[i].aplicativo.id){
                      if (stringFormatted==''){
                        stringFormatted = array[i].nome;       
                      }else{
                        stringFormatted = stringFormatted +', '+ array[i].nome;          
                      }          
                    } 
                 }
                 if(stringFormatted == ''){
                     return null;
                 }                
                 return stringFormatted;
            }           
        })
        // Filtro que adiciona '...' ao final da string
        .filter("ellipsis", function () {
                return function (input, size) {
                    if (input.length <= size) return input;
                    var output = input.substring(0,(size || 2)) + "...";
                    return output;
                };
            });





}(window.angular));

//Função que verifica se o item exite na lista
//Se existir retorna o index onde o item esta, se não retorna -1
isExistis = function (item, list) {
   for (var i = 0; i < list.length; i++) {
      if(item.id == list[i].id){
         return i;
      }
   }       
   return -1;
};