package br.mil.mar.autenticador.test.domain.service;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.directwebremoting.io.FileTransfer;
import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;

import br.mil.mar.commons.dabm.test.domain.AbstractIntegrationTests;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.Aplicativo;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.PerfilAcesso;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.PerfilAcessoPermissao;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.Permissao;
import br.mil.mar.dabm.autenticador.domain.entity.aplicativo.TipoAcesso;
import br.mil.mar.dabm.autenticador.domain.service.AplicativoService;

import com.github.springtestdbunit.annotation.DatabaseOperation;
import com.github.springtestdbunit.annotation.DatabaseSetup;

/**
 * 
 * @author rodrigo@eits.com.br
 */
public class AplicativoServiceTests extends AbstractIntegrationTests
{
	/*-------------------------------------------------------------------
	 *				 		     ATTRIBUTES
	 *-------------------------------------------------------------------*/

	/**
	 * 
	 */
	@Autowired
	private AplicativoService aplicativoService;

	/*-------------------------------------------------------------------
	 *				 		      TESTS
	 *-------------------------------------------------------------------*/

	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void insertPerfilAcessoMustPass()
	{
		PerfilAcesso perfilAcesso = new PerfilAcesso( null, true, true, "TEST", null, new Aplicativo( 1L ), null, 90 );
		perfilAcesso = aplicativoService.insertPerfilAcesso( perfilAcesso );
		Assert.assertNotNull( perfilAcesso );
	}

	/**
	 * @throws MalformedURLException
	 * 
	 */
	@Test
	public void insertAplicativoMustPass() throws MalformedURLException
	{
		
		Aplicativo aplicativo = new Aplicativo();
		aplicativo.setAtivo( true );
		aplicativo.setRefreshToken( UUID.randomUUID().toString() );
		aplicativo.setVersao( "1.0.0-RELEASE" );
		aplicativo.setPerfisDinamicos( false );
		aplicativo.setEndereco( new URL( "http://localhost:8081/client" ) );
		aplicativo.setCodigo( UUID.randomUUID().toString() );
		aplicativo.setNome( "App Test" );
		aplicativo.getTiposAcessoAplicativo().add( TipoAcesso.PASSWORD );

		aplicativo = this.aplicativoService.insertAplicativo( aplicativo );

		this.aplicativoService.findAplicativoByid( aplicativo.getId() );

		Assert.assertNotNull( aplicativo );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
    { "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void mustInsertPerfilAcesso()
	{
		PerfilAcesso perfilAcesso = new PerfilAcesso( null, true, true, "Nome","Descrição", new Aplicativo(1L) ,null, 90);		
		perfilAcesso = this.aplicativoService.insertPerfilAcesso( perfilAcesso );
		Assert.assertNotNull(perfilAcesso);
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
    { "/dataset/aplicativo/AplicativoDataSet.xml",
	  "/dataset/aplicativo/PerfilAcessoDataSet.xml"
    })
	public void removePerfilAcesso()
	{
		this.aplicativoService.removePerfilAcesso( 1L );	
		PerfilAcesso perfilAcesso = this.aplicativoService.findPerfilAcessoById( 1L );
		Assert.assertNull( perfilAcesso );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
    { "/dataset/aplicativo/AplicativoDataSet.xml",
	  "/dataset/aplicativo/PerfilAcessoDataSet.xml",
	  "/dataset/aplicativo/PermissaoDataSet.xml",
	  "/dataset/aplicativo/PerfilAcessoPermissaoDataSet.xml"
    })
	public void removePerfilAcessoPermissao()
	{
		this.aplicativoService.removePerfilAcessoPermissao( 1L );	
		PerfilAcessoPermissao perfilAcessoPermissao = this.aplicativoService.findPerfilAcessoPermissaoById( 1L );
		Assert.assertNull( perfilAcessoPermissao );
	}
	
	/**
	 * 
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml",
	  "/dataset/aplicativo/PerfilAcessoDataSet.xml",
	  "/dataset/aplicativo/PermissaoDataSet.xml"
	})
	public void insertPerfilAcessoPermissaoMustPass()
	{
		PerfilAcessoPermissao perfilAcessoPermissao = new PerfilAcessoPermissao();
		perfilAcessoPermissao.setPerfilAcesso( new PerfilAcesso( 1L ) );
		perfilAcessoPermissao.setPermissao( new Permissao( 1L ) );
		perfilAcessoPermissao = this.aplicativoService.insertPerfilAcessoPermissao( 1L, 1L );
		
		Assert.assertNotNull( perfilAcessoPermissao );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
    { "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void insertPermissaoMustPass()
	{	
		Permissao permissao = new Permissao();
		permissao.setIdentificador( "Indentificador" );
		permissao.setAplicativo( new Aplicativo( 1L ) );	
		permissao = this.aplicativoService.insertPermissao( permissao );
		
		Assert.assertNotNull( permissao );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void findAplicativoByIdMustPass()
	{
		final Aplicativo aplicativo = this.aplicativoService.findAplicativoByid( 1L );

		Assert.assertNotNull( aplicativo );
		Assert.assertNotNull( aplicativo.getId() );
		Assert.assertNotNull( aplicativo.getCreated() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void listAplicativosByFiltersMustReturnAllAtivos()
	{
		final Page<Aplicativo> aplicativos = this.aplicativoService.listAplicativoByFilters( null, true, null );

		Assert.assertNotNull( aplicativos );
		Assert.assertEquals( 2, aplicativos.getSize() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void listAplicativosByFiltersMustReturnAllInativos()
	{
		final Page<Aplicativo> aplicativos = this.aplicativoService.listAplicativoByFilters( null, false, null );

		Assert.assertNotNull( aplicativos );
		Assert.assertEquals( 1, aplicativos.getSize() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void listAplicativosByFiltersMustReturnOneAtivo()
	{
		final Page<Aplicativo> aplicativos = this.aplicativoService.listAplicativoByFilters( "Aplicativo", true, null );

		Assert.assertNotNull( aplicativos );
		Assert.assertEquals( 2, aplicativos.getSize() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void listAplicativosByFiltersMustReturnOneInativo()
	{
		final Page<Aplicativo> aplicativos = this.aplicativoService.listAplicativoByFilters( "Aplicativo", false, null );

		Assert.assertNotNull( aplicativos );
		Assert.assertEquals( 1, aplicativos.getSize() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml", 
	  "/dataset/aplicativo/PerfilAcessoDataSet.xml"
	})
	public void listPerfilAcessoByFiltersMustReturn2()
	{
		final Page<PerfilAcesso> perfilAcesso = this.aplicativoService.listPerfisAcessoByFilters( "Perfil", 1L, null );

		Assert.assertNotNull( perfilAcesso );
		Assert.assertEquals( 2, perfilAcesso.getSize() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml", 
	  "/dataset/aplicativo/PerfilAcessoDataSet.xml",
	  "/dataset/aplicativo/PermissaoDataSet.xml"
	})
	public void listPermissoesByAplicativoMustReturn1()
	{
		final List<Permissao> permissao = this.aplicativoService.listPermissoesByAplicativoId( 1L );

		Assert.assertNotNull( permissao );
		Assert.assertEquals( 1, permissao.size() );
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void disableAplicativosMustPass()
	{
		this.aplicativoService.disableAplicativos( Arrays.asList( 1L ), "Mensagem de motivo de desativação de aplicativo" );
		
		final Aplicativo aplicativo = this.aplicativoService.findAplicativoByid( 1L );
		
		Assert.assertNotNull( aplicativo );
		Assert.assertNotNull( aplicativo.getMensagemDesativacao() );
		Assert.assertFalse( aplicativo.getAtivo() );
			
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void enableAplicativosMustPass()
	{
		this.aplicativoService.enableAplicativos( Arrays.asList( 3L ) );
	
		final Aplicativo aplicativo = this.aplicativoService.findAplicativoByid( 3L );

		Assert.assertNotNull( aplicativo );
		Assert.assertNull( aplicativo.getMensagemDesativacao() );
		Assert.assertTrue( aplicativo.getAtivo() );
				
	}
	
	/**
	 * 
	 */
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml", })
	public void removeOneEnabledAplicativoMustPass()
	{	
		this.aplicativoService.removeAplicativos( Arrays.asList( 1L ) );
	
		List<Aplicativo> aplicativos = this.aplicativoService.listAplicativoByFilters( null, true, null ).getContent();
		
		Assert.assertEquals( 1, aplicativos.size() );
		
	}
	
	@Test
	@DatabaseSetup(type = DatabaseOperation.INSERT, value =
	{ "/dataset/aplicativo/AplicativoDataSet.xml" })
	public void uploadAndRemoveIcone()
	{
		FileInputStream file;
		try
		{
			file = new FileInputStream( this.getClass().getResource( "/foto.jpg" ).getPath() );
			final FileTransfer fileTransfer = new FileTransfer( "test.jpg", "application/jpg", file );

			this.aplicativoService.updateIcone( fileTransfer, 1L );

			this.aplicativoService.removeIcone( 1L );
		}
		catch ( FileNotFoundException e )
		{
			e.printStackTrace();
		}		
	}
}